'use strict';

// Require dependencies
const bodyParser = require('body-parser');
const express = require('express');
const request = require('request');
const rp = require('request-promise');

// Load our code
const fb = require('./facebook');
const bot = require('./bot');
const tradeApi = require('./vnds-trade-api');
const priceApi = require('./vnds-priceservice-api');
const priceWatchApi = require('./vnds-pricewatch-api');
const tygiaApi = require('./tygia-api');
const utils = require('./utils');
const config = require('./config');
const sessions = config.sessions;

const messageGapTime = 200;

var app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Webserver parameter
const PORT = process.env.PORT || 8445;

app.get('/webhook', function(req, res) {
	if (req.query['hub.mode'] === 'subscribe' &&
		req.query['hub.verify_token'] === config.FB_VERIFY_TOKEN) {
		console.log("Validating webhook");
		res.status(200).send(req.query['hub.challenge']);
	} else {
		console.error("Failed validation. Make sure the validation tokens match.");
		res.sendStatus(403);
	}
});

app.post('/webhook', function (req, res) {
	console.log('/webhook requested');
	fb.processRequest(req, function(message, senderId) { // we got a real message from user

		fb.pretendTyping(senderId); // pretend that the bot is typing...

		fb.findOrCreateUserSessionInfo(senderId).then(function(user) { // get user session info, including his facebook's profile

			bot.witProcessor(message, senderId).then(function(entities) {
				var intent = entities.intent ? entities.intent[0] : undefined;

				console.log(entities);

				if (!intent) {
					if (entities.symbol) { // not sure what the user's intent is, but they mentioned a symbol, so let's respond with some stock info anyway
						bot.processStockInfo(entities.symbol).then(function(stockInfoData){
							fb.sendButtonMessage(senderId, stockInfoData.resultText, stockInfoData.actionButtons);
						});
					} else {
						fb.sendTextMessage(senderId, `Em ch∆∞a hi·ªÉu √Ω ${user.pronounce} ${user.fbProfile.first_name}, ${user.pronounce} c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng ·∫°? Em c√≥ th·ªÉ th·ª±c hi·ªán nh·ªØng y√™u c·∫ßu nh∆∞:\n` +
							`  ‚Ä¢ Nh·∫Øn cho ${user.pronounce} khi FPT tƒÉng qu√° 50\n` +
							`  ‚Ä¢ Cho t√¥i xem gi√° VNM\n` +
							`  ‚Ä¢ Gi√° v√†ng th·∫ø n√†o r·ªìi nh·ªâ?\n` +
							`  ‚Ä¢ Gi√° d·∫ßu m·ªõi nh·∫•t\n` +
							`${user.pronounce} c≈©ng c√≥ th·ªÉ li√™n h·ªá v·ªõi hotline c·ªßa VNDIRECT theo s·ªë 1900-5454-09 ho·∫∑c email support@vndirect.com.vn ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p t·ªët h∆°n ·∫°.`);
					}
				} else {
					switch(intent.value) {
						case 'stockInfo':
							if (entities.symbol) {
								bot.processStockInfo(entities.symbol).then(function(stockInfoData){
									fb.sendButtonMessage(senderId, stockInfoData.resultText, stockInfoData.actionButtons);
								});
							} else {
								fb.sendTextMessage(senderId, `Xin l·ªói ${user.pronounce} ${user.fbProfile.first_name}, em kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n n√†y.`);
							}
							break;

						case 'sayHi':
							fb.sendTextMessage(senderId, `‚≠ê Ch√†o ${user.pronounce} ${user.fbProfile.first_name} ·∫°! ‚≠ê \nEm l√† Lan H∆∞∆°ng, d·ªãch v·ª• tr·∫£ l·ªùi t·ª± ƒë·ªông c·ªßa VNDIRECT.\nEm c√≥ th·ªÉ hi·ªÉu nh·ªØng y√™u c·∫ßu nh∆∞:\n` +
								`  ‚Ä¢ Nh·∫Øn cho ${user.pronounce} khi FPT tƒÉng qu√° 50\n` +
								`  ‚Ä¢ Cho t√¥i xem gi√° VNM\n` +
								`  ‚Ä¢ Gi√° v√†ng th·∫ø n√†o r·ªìi nh·ªâ?\n` +
								`  ‚Ä¢ Gi√° d·∫ßu m·ªõi nh·∫•t\nR·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ph·ª•c v·ª• ${user.pronounce}!`);
							break;

						case 'compliment':
							fb.sendTextMessage(senderId, `C√°m ∆°n ${user.pronounce} ${user.fbProfile.first_name} ·∫°! Em mong ƒë∆∞·ª£c ph·ª•c v·ª• ${user.pronounce} th∆∞·ªùng xuy√™n v√† ƒë∆∞·ª£c ${user.pronounce} gi·ªõi thi·ªáu v·ªõi b·∫°n b√® n·ªØa ·∫°! üòã`);
							break;

						case 'complain':
							fb.sendTextMessage(senderId, `üòû Xin l·ªói ${user.pronounce} ${user.fbProfile.first_name} ·∫°, kh·∫£ nƒÉng c·ªßa em v·∫´n c√≤n kh√° h·∫°n ch·∫ø. Em ƒëang h·ªçc h·ªèi ƒë·ªÉ c√≥ th·ªÉ ƒë√°p ·ª©ng c√°c y√™u c·∫ßu c·ªßa ${user.pronounce} t·ªët h∆°n.\nTrong l√∫c ƒë√≥, ${user.pronounce} c√≥ th·ªÉ li√™n h·ªá v·ªõi hotline c·ªßa VNDIRECT theo s·ªë 1900-5454-09 ·∫°.`);
							break;

						case 'goodbye':
							fb.sendTextMessage(senderId, `Bye bye ${user.pronounce} ${user.fbProfile.first_name}! Khi n√†o c·∫ßn, ${user.pronounce} l·∫°i nh·∫Øn tin cho em nh√©!`);
							break;

						case 'whoAreYou':
							fb.sendTextMessage(senderId, `Em l√† Lan H∆∞∆°ng, d·ªãch v·ª• tr·∫£ l·ªùi t·ª± ƒë·ªông c·ªßa VNDIRECT. Em c√≥ th·ªÉ gi√∫p ${user.pronounce} xem gi√° ch·ª©ng kho√°n, gi√° d·∫ßu, gi√° v√†ng.\nR·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ph·ª•c v·ª• ${user.pronounce}!`);
							break;

						case 'thank':
							fb.sendTextMessage(senderId, `Kh√¥ng c√≥ g√¨ ƒë√¢u ·∫°, em r·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• ${user.pronounce}!`);
							break;

						case 'commoditiesPrice':

							if (entities.commodity) {
								if (entities.commodity[0].value == 'oil') {
									tygiaApi.getOilPrice().then(function(oilPrice) {
										fb.sendTextMessage(senderId, `Gi√° d·∫ßu t·∫°i th·ªùi ƒëi·ªÉm n√†y ƒëang l√† ${oilPrice} USD/th√πng ·∫°.`);
									}, function() {
										fb.sendTextMessage(senderId, `Xin l·ªói, em ch∆∞a l·∫•y ƒë∆∞·ª£c gi√° d·∫ßu ·∫° üòû. Xin ${user.pronounce} vui l√≤ng th·ª≠ l·∫°i sau m·ªôt ch√∫t n·ªØa.`);
									});

								} else if (entities.commodity[0].value == 'gold') {
									tygiaApi.getGoldPrice().then(function(goldPrice) {
										fb.sendTextMessage(senderId, `Gi√° v√†ng th·∫ø gi·ªõi:\n` +
											`- Mua: ${goldPrice.world.buy} USD/oz\n` +
											`- B√°n: ${goldPrice.world.sell} USD/oz\n\n` +
											`SJC H√† N·ªôi:\n` +
											`- Mua: ${goldPrice.sjcHanoi.buy} ‚Ç´\n` +
											`- B√°n: ${goldPrice.sjcHanoi.sell} ‚Ç´\n\n` +
											`SJC H·ªì Ch√≠ Minh:\n` +
											`- Mua: ${goldPrice.sjcHcm.buy} ‚Ç´\n` +
											`- B√°n: ${goldPrice.sjcHcm.sell} ‚Ç´\n\n` +
											`SJC B·∫£o T√≠n Minh Ch√¢u:\n` +
											`- Mua: ${goldPrice.sjcBtmc.buy} ‚Ç´\n` +
											`- B√°n: ${goldPrice.sjcBtmc.sell} ‚Ç´`);
									}, function() {
										fb.sendTextMessage(senderId, `Xin l·ªói, em ch∆∞a l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu gi√° v√†ng ·∫° üòû. Xin ${user.pronounce} vui l√≤ng th·ª≠ l·∫°i sau m·ªôt ch√∫t n·ªØa.`);
									});
								}
							}
							break;

						case 'priceAlert':
							var mode, modeLiteral, symbol, price;
							if (entities.side[0].value == 'over') {
								mode = 'gte';
								modeLiteral = 'tƒÉng qua ng∆∞·ª°ng';
							} else if (entities.side[0].value == 'under') {
								mode = 'lte';
								modeLiteral = 'gi·∫£m qua ng∆∞·ª°ng';
							}
							symbol = entities.symbol[0].value;
							price = entities.price[0].value;
							priceWatchApi.priceAlert(symbol, price, mode, senderId).then(function() {
								fb.sendTextMessage(senderId, `V√¢ng, em s·∫Ω b√°o cho ${user.pronounce} ngay khi gi√° ${symbol} ${modeLiteral} ${price} ·∫°.`);
							}, function() {

							});
							break;

						// TODO: login then query real account data
						// case 'accountInquiry':
						// 	fb.sendTextMessage(senderId, `D·∫°, ${user.pronounce} mu·ªën xem danh m·ª•c ƒë·∫ßu t∆∞ ·∫°, ${user.pronounce} vui l√≤ng ƒë·ª£i em m·ªôt l√°t ·∫°...`);
						// 	fb.pretendTyping(senderId);
						// 	tradeApi.displayAccount('0001032425').then(function(data) {
						// 		setTimeout(function() {
						// 			fb.sendTextMessage(senderId, data[0]);
						// 		}, messageGapTime);
						// 		var count = 0;
						// 		for (let stockInfoDataTextItem of data[1]) {
						// 			count++;
						// 			// send facebook messages for stock info in order
						// 			setTimeout(function() {
						// 				fb.sendTextMessage(senderId, stockInfoDataTextItem);
						// 			}, count*messageGapTime);
						// 		}
						// 	});
						// 	break;

						// TODO: fix with real market advice in the future
						// case 'marketAdvice':
						// 	var side;
						// 	if (entities.side) {
						// 		if (entities.side[0].value == 'buy') {
						// 			side = 'mua';
						// 		} else if (entities.side[0].value == 'sell') {
						// 			side = 'b√°n';
						// 		}
						// 		if (entities.side.length == 1) {
						// 			if (Math.random() < 0.5) {
						// 				fb.sendTextMessage(senderId, `C√≥ l·∫Ω kh√¥ng n√™n ${side} m√£ ${entities.symbol[0].value} l√∫c n√†y ${user.pronounce} ·∫° üôà`);
						// 			} else {
						// 				fb.sendTextMessage(senderId, `Chu·∫©n, n√™n ${side} con ${entities.symbol[0].value} s·ªõm ${user.pronounce} ·∫°! üëç`);
						// 			}
						// 		} else {
						// 			fb.sendTextMessage(senderId, `Kh√¥ng n√™n mua hay b√°n m√£ ${entities.symbol[0].value} v√†o th·ªùi ƒëi·ªÉm n√†y, ${user.pronounce} n√™n theo d√µi th·ªã tr∆∞·ªùng v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh sau ·∫°.`);
						// 		}
						// 	} else {
						// 		fb.sendTextMessage(senderId, `V·ªõi m√£ ${entities.symbol[0].value}, em nghƒ© ${user.pronounce} n√™n tin v√†o tr·ª±c gi√°c c·ªßa m√¨nh.`);
						// 	}
						// 	break;

						//TODO: temporarily remove until authentication is resolved
						// case 'placeOrder':
						// 	var sideVal = '';
						// 	var qttyVal = '';
						// 	var symbolVal = '';
						// 	var priceVal = '';
						// 	if (entities.side) {
						// 		sideVal = entities.side[0].value;
						// 	}
						// 	if (entities.qtty) {
						// 		qttyVal = entities.qtty[0].value;
						// 	}
						// 	if (entities.symbol) {
						// 		symbolVal = entities.symbol[0].value;
						// 	}
						// 	if (entities.price) {
						// 		priceVal = entities.price[0].value;
						// 	}
						// 	if (sideVal != '' && qttyVal != '' && symbolVal != '' && priceVal != '') {
						// 		console.log(sideVal, qttyVal, symbolVal, priceVal);
						// 		tradeApi.placeOrder(sideVal, qttyVal, symbolVal, priceVal, '0001032425')
						// 			.then(function(textArray) {
						// 				var message = ''
						// 				if (textArray[0] == 'error') {
						// 					message = `Xin l·ªói ${user.pronounce}, ƒë·∫∑t l·ªánh kh√¥ng th√†nh c√¥ng. Em nh·∫≠n ƒë∆∞·ª£c l·ªói sau ƒë√¢y t·ª´ h·ªá th·ªëng: "${textArray[1]}"`
						// 				} else if (textArray[0] == 'success') {
						// 					message = textArray[1];
						// 				}

						// 				fb.sendTextMessage(senderId, message);
						// 			});
						// 	} else {
						// 		fb.sendTextMessage(senderId, `C√≥ v·∫ª ${user.pronounce} ƒëang mu·ªën ƒë·∫∑t l·ªánh ph·∫£i kh√¥ng ·∫°? M·ªùi ${user.pronounce} ƒë·∫∑t l·∫°i l·ªánh v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin: mua/b√°n, kh·ªëi l∆∞·ª£ng, gi√°, t√™n m√£.`);
						// 	}
						// 	break;

						default:
							fb.sendTextMessage(senderId, `Xin l·ªói ${user.pronounce} ${user.fbProfile.first_name}, em ch∆∞a c√≥ kh·∫£ nƒÉng ƒë√°p ·ª©ng y√™u c·∫ßu n√†y c·ªßa ${user.pronounce}. Xin ${user.pronounce} vui l√≤ng li√™n h·ªá v·ªõi hotline c·ªßa VNDIRECT theo s·ªë 1900-5454-09 ho·∫∑c email support@vndirect.com.vn ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p ·∫°.`);
							break;
					}
				}
			}).catch(function() {
				fb.sendTextMessage(senderId, `Em ch∆∞a hi·ªÉu √Ω ${user.pronounce} ${user.fbProfile.first_name}, ${user.pronounce} c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng ·∫°? Em c√≥ th·ªÉ hi·ªÉu nh·ªØng c√¢u nh∆∞:\n` +
					`  ‚Ä¢ Nh·∫Øn cho ${user.pronounce} khi FPT tƒÉng qu√° 50\n` +
					`  ‚Ä¢ Cho t√¥i xem gi√° VNM\n` +
					`  ‚Ä¢ Gi√° v√†ng th·∫ø n√†o r·ªìi nh·ªâ?\n` +
					`  ‚Ä¢ Gi√° d·∫ßu m·ªõi nh·∫•t\n` +
					`${user.pronounce} c≈©ng c√≥ th·ªÉ li√™n h·ªá v·ªõi hotline c·ªßa VNDIRECT theo s·ªë 1900-5454-09 ho·∫∑c email support@vndirect.com.vn ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p t·ªët h∆°n ·∫°.`);
			});

		});
	});
	res.sendStatus(200);
});

// handles a notify request from a notification server - someone's wanting us to reach out to an user to say something
app.get('/notify', function (req, res) {
	res.status(200).send();

	switch(req.query.type) {
		case 'priceWatch':
			var priceMovement;
			switch(req.query.mode) {
				case 'lte':
				case 'lt':
					priceMovement = 'gi·∫£m qua'
					break;
				case 'gte':
				case 'gt':
					priceMovement = 'tƒÉng qua'
					break;
			}
			fb.sendTextMessage(req.query.senderId, `üîî Gi√° ${req.query.symbol} v·ª´a ${priceMovement} ng∆∞·ª°ng ${req.query.price}!`);
			bot.processStockInfo([{value: req.query.symbol}]).then(function(stockInfoData){
				fb.sendButtonMessage(req.query.senderId, stockInfoData.resultText, stockInfoData.actionButtons);
			});
			break;
	}
});

app.listen(PORT, function() {
	console.log('Listening on port ' + PORT);
});